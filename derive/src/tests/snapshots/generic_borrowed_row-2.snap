---
source: derive/src/tests/cases.rs
---
#[derive(Row)]
struct Sample<'a, A, B> {
    a: A,
    b: &'a B,
}

/****** GENERATED ******/
#[automatically_derived]
impl<'a, A, B> clickhouse::Row for Sample<'a, A, B> {
    const NAME: &'static str = stringify!(Sample);
    fn column_names() -> impl IntoIterator<Item = &'static str> {
        std::iter::empty().chain(std::iter::once("a")).chain(std::iter::once("b"))
    }
    fn column_count() -> usize {
        <Self as clickhouse::Row>::column_names().into_iter().count()
    }
    const KIND: clickhouse::_priv::RowKind = clickhouse::_priv::RowKind::Struct;
    type Value<'__v> = Sample<'__v, A, B>;
}
